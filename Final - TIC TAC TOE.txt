//FinalProject1.cpp : Defines the entry point for the console application
//TIC TAC TOE Program where a human plays against a computer

#include "stdafx.h"

#include <iostream>
#include <string>
#include <vector>
#include <algorithm>

using namespace std;

// global constants
const char H = 'H';
const char C = 'C';
const char EMPTY = ' ';
const char TIE = 'T';
const char NO_ONE = 'N';

// function prototypes
void splash();
void spaces();
int askMove(int high, int low = 0);
char opponent(char piece);
void displayBoard(const vector<char>* const pBoard);
char winner(const vector<char>* const pBoard);
bool isLegal(const vector<char>* const pBoard, int move);
int humanMove(const vector<char>* const pBoard, char human);
int computerMove(vector<char> board, char computer);
void announceWinner(char winner, char computer, char human);

// main function
int main()
{
	//Variable declarations
	char again = 'y';
	int move;
	const int NUM_SQUARES = 9;
	vector<char> board(NUM_SQUARES, EMPTY);
	char human = H;
	char computer = C;
	char turn = H;

	do
	{
		//function call splash
		splash();
		//function call display board
		displayBoard(&board);

		//loop to keep game going as long as there is no winner
		while (winner(&board) == NO_ONE)
		{
			//if it is the humans turns, get their move
			if (turn == human)
			{
				//function call humanMove to set move
				move = humanMove(&board, human);
				//update board with human's move "H"
				board[move] = human;
			}
			//make the computers move
			else
			{
				//function call computerMove to set move
				move = computerMove(board, computer);
				//update board with computer's move "C"
				board[move] = computer;
			}
			//function call display board
			displayBoard(&board);
			//function call opponent to change turns
			turn = opponent(turn);
		}

		//function call announceWinner to broadcast the match winner
		announceWinner(winner(&board), computer, human);
		
		//set the winner to no_one
		winner(&board) == NO_ONE;
		//Ask to play again
		cout << "Play again? y/n\n";
		cin.clear();
		cin >> again;
		

	} while (again == 'y');
	return 0; //End main function
}

// functions
void splash()
//THIS FUNCTION DISPLAYS A LANDING SCREEN
//WHEN THE PROGRAM STARTS
{
	cout << "*********************************" << endl;
	cout << "*********************************" << endl;
	cout << "          TIC TAC TOE            " << endl;
	cout << "        by Austin Smuda          " << endl;
	cout << "*********************************" << endl;
	cout << "*********************************" << endl;
	
	//Pause and clear screen
	system("PAUSE");
	system("CLS");
}
void spaces()
//THIS FUNCTION DISPLAYS A MODEL GAME BOARD
//WITH THE SPACES AND THEIR CORRESPONDING NUMBERS
{
	cout << "        TIC TAC TOE\n\n";

	cout << "        0 | 1 | 2\n";
	cout << "        ---------\n";
	cout << "        3 | 4 | 5\n";
	cout << "        ---------\n";
	cout << "        6 | 7 | 8\n\n";
	
	cout << "Your move...\n";

}
int askMove(int high, int low)
//THIS FUNCTION ASKS THE PLAYER FOR A PIECE NUMBER
//THAT IS WITHIN THE RANGE OF 0 - 8 (LOW AND HIGH)
//AND RETURNS THAT SAME NUMBER
{
	//Variables
	string userInput;
	int number;

	//do loop to get human's choice and validate it
	do
	{
		//Ask the human for their move in range of 0-8
		cout << "Which space do you want? Between 0 - 8\n";
		getline(cin, userInput);
		
		//Validate that only numbers were entered
		while (userInput.find_first_not_of("012345678") != -1 || userInput == "")
		{
			//Error to display & try again
			cout << "Enter a space between 0 and 8\n";
			cin.clear();
			getline(cin, userInput);
		}
		//If successful, convert to an int
		number = stoi(userInput);
		//Repeat do loop as long as number is outside the range
		//of 0 to 8
	} while (number < 0 || number > 8);

	//Clear screen
	system("CLS");

	return number;
}
char opponent(char piece)
//THIS FUNCTION IS USED TO RETURN A CHARACTER
//THAT IS USED TO DETERMINE WHEN IT IS THE COMPUTER'S TURN
{
	//if the piece that was just placed on the board was an "H"
	//return "C" so that the computer may take its turn
	if (piece == H)
	{
		return C;
	}
	//else if the piece that was just placed on the board was a "C"
	//return "H" so that the human may take their turn
	else
	{
		return H;
	}
}
void displayBoard(const vector<char>* const pBoard)
//THIS FUNCTION DISPLAYS THE BOARD ON THE SCREEN
//AND ALSO RECEIVES THE UPDATED BOARD VIA POINTER
{
	//Call spaces function
	spaces();

	//Display the current board via pointers with blanks where no moves
	//have been made, or C's and H's where moves have been made
	cout << "\n\t" << (*pBoard)[0] << " | " << (*pBoard)[1] << " | " << (*pBoard)[2];
	cout << "\n\t" << "---------";
	cout << "\n\t" << (*pBoard)[3] << " | " << (*pBoard)[4] << " | " << (*pBoard)[5];
	cout << "\n\t" << "---------";
	cout << "\n\t" << (*pBoard)[6] << " | " << (*pBoard)[7] << " | " << (*pBoard)[8];
	cout << "\n\n";
}

char winner(const vector<char>* const pBoard)
//THIS FUNCTION DETERMINES THE WINNER OF THE GAME
//AND RECEIVES A BOARD. IT RETURNS A CHAR (H, C, T, OR N).
//H = HUMAN, C = COMPUTER, T = TIE, N = NO ONE, TO INDICATE
//WHO HAS WON YET - IF ANYBODY
{
	//constant for every possible winning combination
	const int WINNING_ROWS[8][3] = { { 0, 1, 2 },
	{ 3, 4, 5 },
	{ 6, 7, 8 },
	{ 0, 3, 6 },
	{ 1, 4, 7 },
	{ 2, 5, 8 },
	{ 0, 4, 8 },
	{ 2, 4, 6 } };
	const int TOTAL_ROWS = 8;

	//this foor loop checks to see if there is a winner by looking if any of the
	//winning combos above all contain the same values (C or H)
	for (int row = 0; row < TOTAL_ROWS; ++row)
	{
		//if statement to check if either player has 3 pieces in any winning row
		//and are not empty
		if (((*pBoard)[WINNING_ROWS[row][0]] != EMPTY) &&
			((*pBoard)[WINNING_ROWS[row][0]] == (*pBoard)[WINNING_ROWS[row][1]]) &&
			((*pBoard)[WINNING_ROWS[row][1]] == (*pBoard)[WINNING_ROWS[row][2]]))
		{
			//if there is a winner, return the piece (C or H) so that
			//the proper winner may be announced
			return (*pBoard)[WINNING_ROWS[row][0]];
		}
	}

	//since the above loop did not find a winner, lets check for a tie.
	//if there are no empty spaces, and no winner, that means it is a tie.
	if (count(pBoard->begin(), pBoard->end(), EMPTY) == 0)
		return TIE;

	//since neither of the above loops found a winner or a tie,
	//the game continues
	return NO_ONE;
}

inline bool isLegal(int move, const vector<char>* pBoard)
//THIS FUNCTION DETERMINES WHETHER A MOVE IS LEGAL OR NOT.
//IT RECEIVES THE BOARD AND A MOVE AND RETURNS
//EITHER TRUE OR FALSE. TRUE IF THE MOVE IS LEGAL
//AND FALSE IF IT IS NOT
{
	return ((*pBoard)[move] == EMPTY);
}

int humanMove(const vector<char>* const pBoard, char human)
//THIS FUNCTION GETS THE PLAYER'S MOVE. IT RECEIVES THE BOARD
//AND THE COMPUTER'S PIECE. IT RETURNS THE COMPUTER'S MOVE
{
	//set move the the spot the human wants to take
	int move = askMove((pBoard->size() - 1));
	//tests if move is valid or not (already taken)
	while (!isLegal(move, pBoard))
	{
		//function call to show the board
		displayBoard(pBoard);
		//error message to display
		cout << "\nThat spot is already taken. Try again...\n";
		//ask for another move
		move = askMove((pBoard->size() - 1));	
	}
	//clear screen and return the move taken
	system("CLS");
	return move;
}

int computerMove(vector<char> board, char computer)
//THIS FUNCTION IS THE AI FOR THE COMPUTER TO DETERMINE
//WHERE THE COMPUTER IS GOING TO MOVE. IT RECEIVES A
//BOARD AND THE COMPUTER'S PIECE. IT RETURNS THE 
//COMPUTER'S MOVE
{
	//Variable declaration
	unsigned int move = 0;
	bool found = false;

	//if the computer can win on next move, make that move
	while (!found && move < board.size())
	{
		if (isLegal(move, &board))
		{
			//try a space
			board[move] = computer;
			//see if it wins
			found = winner(&board) == computer;
			//erase the move
			board[move] = EMPTY;
		}
		//if that move cant win it, increment and try another one
		//until options are exhausted
		if (!found)
		{
			++move;
		}
	}

	//if the human can win on the next move, take that spot
	if (!found)
	{
		move = 0;
		char human = opponent(computer);

		while (!found && move < board.size())
		{
			if (isLegal(move, &board))
			{
				//try a space
				board[move] = human;
				//see if it wins
				found = winner(&board) == human;
				//erase the move
				board[move] = EMPTY;
			}
			//if that move cant win it, increment and try another one
			//until options are exhausted
			if (!found)
			{
				++move;
			}
		}
	}

	//if neither player or computer can win, pick the next
	//best space
	if (!found)
	{
		move = 0;
		unsigned int i = 0;
		//constant to hold the best possible moves in order
		//center -> corners -> middle edges
		const int BEST_MOVES[] = { 4, 0, 2, 6, 8, 1, 3, 5, 7 };
		//choose the best space
		while (!found && i <  board.size())
		{
			move = BEST_MOVES[i];
			//if that move is available, take it
			if (isLegal(move, &board))
			{
				found = true;
			}
			//increment as needed
			++i;
		}
	}
	//clear the screen and return the move 
	system("CLS");
	return move;
}

void announceWinner(char winner, char computer, char human)
//THIS FUNCTION DISPLAYS WHO THE WINNER OF THE MATCH IS
//USING CHARACTER COMPARISON
{
	//What to display if computer wins
	if (winner == computer)
	{
		cout << "The computer wins!\n";
	}
	//What to display if human wins
	else if (winner == human)
	{
		cout << "You win!\n";
	}
	//What to display if tie
	else
	{
		cout << "Nobody wins, it's a tie!\n";
	}
	system("PAUSE");
	
}


